-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module Frontend.Signe.Abs where

newtype Id = Id ((Int,Int),String)
  deriving (Eq, Ord, Show, Read)

newtype Scalar = Scalar String
  deriving (Eq, Ord, Show, Read)

data Program = Progr [Toplevel]
  deriving (Eq, Ord, Show, Read)

data Toplevel
    = ToplF Id [Pattern] Expr | ToplFT Id [Pattern] Type Expr
  deriving (Eq, Ord, Show, Read)

data Expr
    = EVar Id
    | ETrue
    | EFalse
    | ETup [Expr]
    | EApp Expr Expr
    | ESup Complex Expr SupOp Complex Expr
    | EMul Complex Expr
    | EComp Expr Expr
    | EIfq Expr Expr Expr
    | EIf Expr Expr Expr
    | ELet [Let] Expr
    | EAbs [Id] Expr
  deriving (Eq, Ord, Show, Read)

data Let = LLet Pattern Expr
  deriving (Eq, Ord, Show, Read)

data SupOp = SOPlus | SOMin
  deriving (Eq, Ord, Show, Read)

data Complex
    = CComp Scalar Scalar
    | CComn Scalar Scalar
    | CPi
    | CE
    | CExp Complex Complex
    | CDiv Complex Complex
    | CMul Complex Complex
  deriving (Eq, Ord, Show, Read)

data Pattern = Pattern PatternVar | Patterns [PatternVar]
  deriving (Eq, Ord, Show, Read)

data PatternVar = PVar Id
  deriving (Eq, Ord, Show, Read)

data Mono
    = MVar Id | MQubit | MUnit | MTens Mono Mono | MArrow Mono Mono
  deriving (Eq, Ord, Show, Read)

data Type = TMono Mono | TPoly [Id] Mono
  deriving (Eq, Ord, Show, Read)

