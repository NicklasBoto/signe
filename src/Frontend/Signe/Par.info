-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Frontend/Signe/Par.y
-----------------------------------------------------------------------------

state 88 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pListToplevel -> ListToplevel               (1)
	%start_pToplevel -> Toplevel                       (2)
	%start_pListPattern -> ListPattern                 (3)
	%start_pExpr3 -> Expr3                             (4)
	%start_pExpr2 -> Expr2                             (5)
	%start_pExpr1 -> Expr1                             (6)
	%start_pExpr -> Expr                               (7)
	%start_pListExpr -> ListExpr                       (8)
	%start_pLet -> Let                                 (9)
	%start_pListLet -> ListLet                         (10)
	%start_pComplex -> Complex                         (11)
	%start_pPattern -> Pattern                         (12)
	%start_pMono2 -> Mono2                             (13)
	%start_pMono1 -> Mono1                             (14)
	%start_pMono -> Mono                               (15)
	%start_pType -> Type                               (16)
	%start_pListId -> ListId                           (17)
	Id -> L_Id                                         (18)
	Scalar -> L_Scalar                                 (19)
	Program -> ListToplevel                            (20)
	ListToplevel ->                                    (21)
	ListToplevel -> Toplevel ';' ListToplevel          (22)
	Toplevel -> Id ListPattern ':=' Expr               (23)
	Toplevel -> Id ListPattern ':' Type ':=' Expr      (24)
	ListPattern ->                                     (25)
	ListPattern -> Pattern ListPattern                 (26)
	Expr3 -> Id                                        (27)
	Expr3 -> '~1'                                      (28)
	Expr3 -> '~0'                                      (29)
	Expr3 -> '~+'                                      (30)
	Expr3 -> '~-'                                      (31)
	Expr3 -> '~i'                                      (32)
	Expr3 -> '~j'                                      (33)
	Expr3 -> '(' ListExpr ')'                          (34)
	Expr3 -> Complex '*' Expr3                         (35)
	Expr3 -> '(' Expr ')'                              (36)
	Expr2 -> Expr2 Expr3                               (37)
	Expr2 -> Expr3                                     (38)
	Expr1 -> Expr2 '+' Expr1                           (39)
	Expr1 -> Expr2 '-' Expr1                           (40)
	Expr1 -> 'if°' Expr 'then' Expr 'else' Expr        (41)
	Expr1 -> 'if*' Expr 'then' Expr 'else' Expr        (42)
	Expr1 -> 'if' Expr 'then' Expr 'else' Expr         (43)
	Expr1 -> 'let' '{' ListLet '}' 'in' Expr           (44)
	Expr1 -> 'λ' ListId '.' Expr                       (45)
	Expr1 -> '\\' ListId '.' Expr                      (46)
	Expr1 -> Expr2                                     (47)
	Expr -> Expr1                                      (48)
	ListExpr ->                                        (49)
	ListExpr -> Expr                                   (50)
	ListExpr -> Expr ',' ListExpr                      (51)
	Let -> Pattern '=' Expr                            (52)
	ListLet -> Let                                     (53)
	ListLet -> Let ';' ListLet                         (54)
	Complex -> Scalar '+' Scalar 'j'                   (55)
	Complex -> Scalar                                  (56)
	Complex -> Scalar 'j'                              (57)
	Complex -> '-j'                                    (58)
	Complex -> 'j'                                     (59)
	Pattern -> Id                                      (60)
	Pattern -> '(' Id ',' Id ')'                       (61)
	Mono2 -> Id                                        (62)
	Mono2 -> 'qubit'                                   (63)
	Mono2 -> '(' Mono ')'                              (64)
	Mono1 -> Mono2 '*' Mono1                           (65)
	Mono1 -> Mono2 '->' Mono1                          (66)
	Mono1 -> Mono2                                     (67)
	Mono -> Mono1                                      (68)
	Type -> Mono                                       (69)
	Type -> '∀' ListId '.' Mono                        (70)
	Type -> 'forall' ListId '.' Mono                   (71)
	ListId -> Id                                       (72)
	ListId -> Id ListId                                (73)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'*'            { PT _ (TS _ 3) }
	'+'            { PT _ (TS _ 4) }
	','            { PT _ (TS _ 5) }
	'-'            { PT _ (TS _ 6) }
	'->'           { PT _ (TS _ 7) }
	'-j'           { PT _ (TS _ 8) }
	'.'            { PT _ (TS _ 9) }
	':'            { PT _ (TS _ 10) }
	':='           { PT _ (TS _ 11) }
	';'            { PT _ (TS _ 12) }
	'='            { PT _ (TS _ 13) }
	'\\'           { PT _ (TS _ 14) }
	'else'         { PT _ (TS _ 15) }
	'forall'       { PT _ (TS _ 16) }
	'if'           { PT _ (TS _ 17) }
	'if*'          { PT _ (TS _ 18) }
	'if°'          { PT _ (TS _ 19) }
	'in'           { PT _ (TS _ 20) }
	'j'            { PT _ (TS _ 21) }
	'let'          { PT _ (TS _ 22) }
	'qubit'        { PT _ (TS _ 23) }
	'then'         { PT _ (TS _ 24) }
	'{'            { PT _ (TS _ 25) }
	'}'            { PT _ (TS _ 26) }
	'~+'           { PT _ (TS _ 27) }
	'~-'           { PT _ (TS _ 28) }
	'~0'           { PT _ (TS _ 29) }
	'~1'           { PT _ (TS _ 30) }
	'~i'           { PT _ (TS _ 31) }
	'~j'           { PT _ (TS _ 32) }
	'λ'            { PT _ (TS _ 33) }
	'∀'            { PT _ (TS _ 34) }
	L_Id           { PT _ (T_Id _) }
	L_Scalar       { PT _ (T_Scalar $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pListToplevel rule  1
	%start_pToplevel rule  2
	%start_pListPattern rule  3
	%start_pExpr3   rule  4
	%start_pExpr2   rule  5
	%start_pExpr1   rule  6
	%start_pExpr    rule  7
	%start_pListExpr rule  8
	%start_pLet     rule  9
	%start_pListLet rule  10
	%start_pComplex rule  11
	%start_pPattern rule  12
	%start_pMono2   rule  13
	%start_pMono1   rule  14
	%start_pMono    rule  15
	%start_pType    rule  16
	%start_pListId  rule  17
	Id              rule  18
	Scalar          rule  19
	Program         rule  20
	ListToplevel    rules 21, 22
	Toplevel        rules 23, 24
	ListPattern     rules 25, 26
	Expr3           rules 27, 28, 29, 30, 31, 32, 33, 34, 35, 36
	Expr2           rules 37, 38
	Expr1           rules 39, 40, 41, 42, 43, 44, 45, 46, 47
	Expr            rule  48
	ListExpr        rules 49, 50, 51
	Let             rule  52
	ListLet         rules 53, 54
	Complex         rules 55, 56, 57, 58, 59
	Pattern         rules 60, 61
	Mono2           rules 62, 63, 64
	Mono1           rules 65, 66, 67
	Mono            rule  68
	Type            rules 69, 70, 71
	ListId          rules 72, 73

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	L_Id           shift, and enter state 19
	%eof           reduce using rule 21

	Id             goto state 72
	Program        goto state 76
	ListToplevel   goto state 77
	Toplevel       goto state 75

State 1

	%start_pListToplevel -> . ListToplevel              (rule 1)

	L_Id           shift, and enter state 19
	%eof           reduce using rule 21

	Id             goto state 72
	ListToplevel   goto state 74
	Toplevel       goto state 75

State 2

	%start_pToplevel -> . Toplevel                      (rule 2)

	L_Id           shift, and enter state 19

	Id             goto state 72
	Toplevel       goto state 73

State 3

	%start_pListPattern -> . ListPattern                (rule 3)

	'('            shift, and enter state 36
	L_Id           shift, and enter state 19
	%eof           reduce using rule 25

	Id             goto state 34
	ListPattern    goto state 70
	Pattern        goto state 71

State 4

	%start_pExpr3 -> . Expr3                            (rule 4)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'j'            shift, and enter state 40
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 69
	Complex        goto state 52

State 5

	%start_pExpr2 -> . Expr2                            (rule 5)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'j'            shift, and enter state 40
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 68
	Complex        goto state 52

State 6

	%start_pExpr1 -> . Expr1                            (rule 6)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 67
	Complex        goto state 52

State 7

	%start_pExpr -> . Expr                              (rule 7)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 66
	Complex        goto state 52

State 8

	%start_pListExpr -> . ListExpr                      (rule 8)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41
	%eof           reduce using rule 49

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 50
	ListExpr       goto state 51
	Complex        goto state 52

State 9

	%start_pLet -> . Let                                (rule 9)

	'('            shift, and enter state 36
	L_Id           shift, and enter state 19

	Id             goto state 34
	Let            goto state 45
	Pattern        goto state 44

State 10

	%start_pListLet -> . ListLet                        (rule 10)

	'('            shift, and enter state 36
	L_Id           shift, and enter state 19

	Id             goto state 34
	Let            goto state 42
	ListLet        goto state 43
	Pattern        goto state 44

State 11

	%start_pComplex -> . Complex                        (rule 11)

	'-j'           shift, and enter state 39
	'j'            shift, and enter state 40
	L_Scalar       shift, and enter state 41

	Scalar         goto state 37
	Complex        goto state 38

State 12

	%start_pPattern -> . Pattern                        (rule 12)

	'('            shift, and enter state 36
	L_Id           shift, and enter state 19

	Id             goto state 34
	Pattern        goto state 35

State 13

	%start_pMono2 -> . Mono2                            (rule 13)

	'('            shift, and enter state 27
	'qubit'        shift, and enter state 29
	L_Id           shift, and enter state 19

	Id             goto state 22
	Mono2          goto state 33

State 14

	%start_pMono1 -> . Mono1                            (rule 14)

	'('            shift, and enter state 27
	'qubit'        shift, and enter state 29
	L_Id           shift, and enter state 19

	Id             goto state 22
	Mono2          goto state 23
	Mono1          goto state 32

State 15

	%start_pMono -> . Mono                              (rule 15)

	'('            shift, and enter state 27
	'qubit'        shift, and enter state 29
	L_Id           shift, and enter state 19

	Id             goto state 22
	Mono2          goto state 23
	Mono1          goto state 24
	Mono           goto state 31

State 16

	%start_pType -> . Type                              (rule 16)

	'('            shift, and enter state 27
	'forall'       shift, and enter state 28
	'qubit'        shift, and enter state 29
	'∀'            shift, and enter state 30
	L_Id           shift, and enter state 19

	Id             goto state 22
	Mono2          goto state 23
	Mono1          goto state 24
	Mono           goto state 25
	Type           goto state 26

State 17

	%start_pListId -> . ListId                          (rule 17)

	L_Id           shift, and enter state 19

	Id             goto state 20
	ListId         goto state 21

State 18

	Id -> . L_Id                                        (rule 18)

	L_Id           shift, and enter state 19


State 19

	Id -> L_Id .                                        (rule 18)

	'('            reduce using rule 18
	')'            reduce using rule 18
	'*'            reduce using rule 18
	'+'            reduce using rule 18
	','            reduce using rule 18
	'-'            reduce using rule 18
	'->'           reduce using rule 18
	'-j'           reduce using rule 18
	'.'            reduce using rule 18
	':'            reduce using rule 18
	':='           reduce using rule 18
	';'            reduce using rule 18
	'='            reduce using rule 18
	'else'         reduce using rule 18
	'j'            reduce using rule 18
	'then'         reduce using rule 18
	'}'            reduce using rule 18
	'~+'           reduce using rule 18
	'~-'           reduce using rule 18
	'~0'           reduce using rule 18
	'~1'           reduce using rule 18
	'~i'           reduce using rule 18
	'~j'           reduce using rule 18
	L_Id           reduce using rule 18
	L_Scalar       reduce using rule 18
	%eof           reduce using rule 18


State 20

	ListId -> Id .                                      (rule 72)
	ListId -> Id . ListId                               (rule 73)

	'.'            reduce using rule 72
	L_Id           shift, and enter state 19
	%eof           reduce using rule 72

	Id             goto state 20
	ListId         goto state 104

State 21

	%start_pListId -> ListId .                          (rule 17)

	%eof           accept


State 22

	Mono2 -> Id .                                       (rule 62)

	')'            reduce using rule 62
	'*'            reduce using rule 62
	'->'           reduce using rule 62
	':='           reduce using rule 62
	%eof           reduce using rule 62


State 23

	Mono1 -> Mono2 . '*' Mono1                          (rule 65)
	Mono1 -> Mono2 . '->' Mono1                         (rule 66)
	Mono1 -> Mono2 .                                    (rule 67)

	')'            reduce using rule 67
	'*'            shift, and enter state 102
	'->'           shift, and enter state 103
	':='           reduce using rule 67
	%eof           reduce using rule 67


State 24

	Mono -> Mono1 .                                     (rule 68)

	')'            reduce using rule 68
	':='           reduce using rule 68
	%eof           reduce using rule 68


State 25

	Type -> Mono .                                      (rule 69)

	':='           reduce using rule 69
	%eof           reduce using rule 69


State 26

	%start_pType -> Type .                              (rule 16)

	%eof           accept


State 27

	Mono2 -> '(' . Mono ')'                             (rule 64)

	'('            shift, and enter state 27
	'qubit'        shift, and enter state 29
	L_Id           shift, and enter state 19

	Id             goto state 22
	Mono2          goto state 23
	Mono1          goto state 24
	Mono           goto state 101

State 28

	Type -> 'forall' . ListId '.' Mono                  (rule 71)

	L_Id           shift, and enter state 19

	Id             goto state 20
	ListId         goto state 100

State 29

	Mono2 -> 'qubit' .                                  (rule 63)

	')'            reduce using rule 63
	'*'            reduce using rule 63
	'->'           reduce using rule 63
	':='           reduce using rule 63
	%eof           reduce using rule 63


State 30

	Type -> '∀' . ListId '.' Mono                       (rule 70)

	L_Id           shift, and enter state 19

	Id             goto state 20
	ListId         goto state 99

State 31

	%start_pMono -> Mono .                              (rule 15)

	%eof           accept


State 32

	%start_pMono1 -> Mono1 .                            (rule 14)

	%eof           accept


State 33

	%start_pMono2 -> Mono2 .                            (rule 13)

	%eof           accept


State 34

	Pattern -> Id .                                     (rule 60)

	'('            reduce using rule 60
	':'            reduce using rule 60
	':='           reduce using rule 60
	'='            reduce using rule 60
	L_Id           reduce using rule 60
	%eof           reduce using rule 60


State 35

	%start_pPattern -> Pattern .                        (rule 12)

	%eof           accept


State 36

	Pattern -> '(' . Id ',' Id ')'                      (rule 61)

	L_Id           shift, and enter state 19

	Id             goto state 98

State 37

	Complex -> Scalar . '+' Scalar 'j'                  (rule 55)
	Complex -> Scalar .                                 (rule 56)
	Complex -> Scalar . 'j'                             (rule 57)

	'*'            reduce using rule 56
	'+'            shift, and enter state 96
	'j'            shift, and enter state 97
	%eof           reduce using rule 56


State 38

	%start_pComplex -> Complex .                        (rule 11)

	%eof           accept


State 39

	Complex -> '-j' .                                   (rule 58)

	'*'            reduce using rule 58
	%eof           reduce using rule 58


State 40

	Complex -> 'j' .                                    (rule 59)

	'*'            reduce using rule 59
	%eof           reduce using rule 59


State 41

	Scalar -> L_Scalar .                                (rule 19)

	'*'            reduce using rule 19
	'+'            reduce using rule 19
	'j'            reduce using rule 19
	%eof           reduce using rule 19


State 42

	ListLet -> Let .                                    (rule 53)
	ListLet -> Let . ';' ListLet                        (rule 54)

	';'            shift, and enter state 95
	'}'            reduce using rule 53
	%eof           reduce using rule 53


State 43

	%start_pListLet -> ListLet .                        (rule 10)

	%eof           accept


State 44

	Let -> Pattern . '=' Expr                           (rule 52)

	'='            shift, and enter state 94


State 45

	%start_pLet -> Let .                                (rule 9)

	%eof           accept


State 46

	Expr3 -> Id .                                       (rule 27)

	'('            reduce using rule 27
	')'            reduce using rule 27
	'+'            reduce using rule 27
	','            reduce using rule 27
	'-'            reduce using rule 27
	'-j'           reduce using rule 27
	';'            reduce using rule 27
	'else'         reduce using rule 27
	'j'            reduce using rule 27
	'then'         reduce using rule 27
	'}'            reduce using rule 27
	'~+'           reduce using rule 27
	'~-'           reduce using rule 27
	'~0'           reduce using rule 27
	'~1'           reduce using rule 27
	'~i'           reduce using rule 27
	'~j'           reduce using rule 27
	L_Id           reduce using rule 27
	L_Scalar       reduce using rule 27
	%eof           reduce using rule 27


State 47

	Expr2 -> Expr3 .                                    (rule 38)

	'('            reduce using rule 38
	')'            reduce using rule 38
	'+'            reduce using rule 38
	','            reduce using rule 38
	'-'            reduce using rule 38
	'-j'           reduce using rule 38
	';'            reduce using rule 38
	'else'         reduce using rule 38
	'j'            reduce using rule 38
	'then'         reduce using rule 38
	'}'            reduce using rule 38
	'~+'           reduce using rule 38
	'~-'           reduce using rule 38
	'~0'           reduce using rule 38
	'~1'           reduce using rule 38
	'~i'           reduce using rule 38
	'~j'           reduce using rule 38
	L_Id           reduce using rule 38
	L_Scalar       reduce using rule 38
	%eof           reduce using rule 38


State 48

	Expr2 -> Expr2 . Expr3                              (rule 37)
	Expr1 -> Expr2 . '+' Expr1                          (rule 39)
	Expr1 -> Expr2 . '-' Expr1                          (rule 40)
	Expr1 -> Expr2 .                                    (rule 47)

	'('            shift, and enter state 53
	')'            reduce using rule 47
	'+'            shift, and enter state 92
	','            reduce using rule 47
	'-'            shift, and enter state 93
	'-j'           shift, and enter state 39
	';'            reduce using rule 47
	'else'         reduce using rule 47
	'j'            shift, and enter state 40
	'then'         reduce using rule 47
	'}'            reduce using rule 47
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41
	%eof           reduce using rule 47

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 81
	Complex        goto state 52

State 49

	Expr -> Expr1 .                                     (rule 48)

	')'            reduce using rule 48
	','            reduce using rule 48
	';'            reduce using rule 48
	'else'         reduce using rule 48
	'then'         reduce using rule 48
	'}'            reduce using rule 48
	%eof           reduce using rule 48


State 50

	ListExpr -> Expr .                                  (rule 50)
	ListExpr -> Expr . ',' ListExpr                     (rule 51)

	')'            reduce using rule 50
	','            shift, and enter state 91
	%eof           reduce using rule 50


State 51

	%start_pListExpr -> ListExpr .                      (rule 8)

	%eof           accept


State 52

	Expr3 -> Complex . '*' Expr3                        (rule 35)

	'*'            shift, and enter state 90


State 53

	Expr3 -> '(' . ListExpr ')'                         (rule 34)
	Expr3 -> '(' . Expr ')'                             (rule 36)

	'('            shift, and enter state 53
	')'            reduce using rule 49
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 88
	ListExpr       goto state 89
	Complex        goto state 52

State 54

	Expr1 -> '\\' . ListId '.' Expr                     (rule 46)

	L_Id           shift, and enter state 19

	Id             goto state 20
	ListId         goto state 87

State 55

	Expr1 -> 'if' . Expr 'then' Expr 'else' Expr        (rule 43)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 86
	Complex        goto state 52

State 56

	Expr1 -> 'if*' . Expr 'then' Expr 'else' Expr       (rule 42)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 85
	Complex        goto state 52

State 57

	Expr1 -> 'if°' . Expr 'then' Expr 'else' Expr       (rule 41)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 84
	Complex        goto state 52

State 58

	Expr1 -> 'let' . '{' ListLet '}' 'in' Expr          (rule 44)

	'{'            shift, and enter state 83


State 59

	Expr3 -> '~+' .                                     (rule 30)

	'('            reduce using rule 30
	')'            reduce using rule 30
	'+'            reduce using rule 30
	','            reduce using rule 30
	'-'            reduce using rule 30
	'-j'           reduce using rule 30
	';'            reduce using rule 30
	'else'         reduce using rule 30
	'j'            reduce using rule 30
	'then'         reduce using rule 30
	'}'            reduce using rule 30
	'~+'           reduce using rule 30
	'~-'           reduce using rule 30
	'~0'           reduce using rule 30
	'~1'           reduce using rule 30
	'~i'           reduce using rule 30
	'~j'           reduce using rule 30
	L_Id           reduce using rule 30
	L_Scalar       reduce using rule 30
	%eof           reduce using rule 30


State 60

	Expr3 -> '~-' .                                     (rule 31)

	'('            reduce using rule 31
	')'            reduce using rule 31
	'+'            reduce using rule 31
	','            reduce using rule 31
	'-'            reduce using rule 31
	'-j'           reduce using rule 31
	';'            reduce using rule 31
	'else'         reduce using rule 31
	'j'            reduce using rule 31
	'then'         reduce using rule 31
	'}'            reduce using rule 31
	'~+'           reduce using rule 31
	'~-'           reduce using rule 31
	'~0'           reduce using rule 31
	'~1'           reduce using rule 31
	'~i'           reduce using rule 31
	'~j'           reduce using rule 31
	L_Id           reduce using rule 31
	L_Scalar       reduce using rule 31
	%eof           reduce using rule 31


State 61

	Expr3 -> '~0' .                                     (rule 29)

	'('            reduce using rule 29
	')'            reduce using rule 29
	'+'            reduce using rule 29
	','            reduce using rule 29
	'-'            reduce using rule 29
	'-j'           reduce using rule 29
	';'            reduce using rule 29
	'else'         reduce using rule 29
	'j'            reduce using rule 29
	'then'         reduce using rule 29
	'}'            reduce using rule 29
	'~+'           reduce using rule 29
	'~-'           reduce using rule 29
	'~0'           reduce using rule 29
	'~1'           reduce using rule 29
	'~i'           reduce using rule 29
	'~j'           reduce using rule 29
	L_Id           reduce using rule 29
	L_Scalar       reduce using rule 29
	%eof           reduce using rule 29


State 62

	Expr3 -> '~1' .                                     (rule 28)

	'('            reduce using rule 28
	')'            reduce using rule 28
	'+'            reduce using rule 28
	','            reduce using rule 28
	'-'            reduce using rule 28
	'-j'           reduce using rule 28
	';'            reduce using rule 28
	'else'         reduce using rule 28
	'j'            reduce using rule 28
	'then'         reduce using rule 28
	'}'            reduce using rule 28
	'~+'           reduce using rule 28
	'~-'           reduce using rule 28
	'~0'           reduce using rule 28
	'~1'           reduce using rule 28
	'~i'           reduce using rule 28
	'~j'           reduce using rule 28
	L_Id           reduce using rule 28
	L_Scalar       reduce using rule 28
	%eof           reduce using rule 28


State 63

	Expr3 -> '~i' .                                     (rule 32)

	'('            reduce using rule 32
	')'            reduce using rule 32
	'+'            reduce using rule 32
	','            reduce using rule 32
	'-'            reduce using rule 32
	'-j'           reduce using rule 32
	';'            reduce using rule 32
	'else'         reduce using rule 32
	'j'            reduce using rule 32
	'then'         reduce using rule 32
	'}'            reduce using rule 32
	'~+'           reduce using rule 32
	'~-'           reduce using rule 32
	'~0'           reduce using rule 32
	'~1'           reduce using rule 32
	'~i'           reduce using rule 32
	'~j'           reduce using rule 32
	L_Id           reduce using rule 32
	L_Scalar       reduce using rule 32
	%eof           reduce using rule 32


State 64

	Expr3 -> '~j' .                                     (rule 33)

	'('            reduce using rule 33
	')'            reduce using rule 33
	'+'            reduce using rule 33
	','            reduce using rule 33
	'-'            reduce using rule 33
	'-j'           reduce using rule 33
	';'            reduce using rule 33
	'else'         reduce using rule 33
	'j'            reduce using rule 33
	'then'         reduce using rule 33
	'}'            reduce using rule 33
	'~+'           reduce using rule 33
	'~-'           reduce using rule 33
	'~0'           reduce using rule 33
	'~1'           reduce using rule 33
	'~i'           reduce using rule 33
	'~j'           reduce using rule 33
	L_Id           reduce using rule 33
	L_Scalar       reduce using rule 33
	%eof           reduce using rule 33


State 65

	Expr1 -> 'λ' . ListId '.' Expr                      (rule 45)

	L_Id           shift, and enter state 19

	Id             goto state 20
	ListId         goto state 82

State 66

	%start_pExpr -> Expr .                              (rule 7)

	%eof           accept


State 67

	%start_pExpr1 -> Expr1 .                            (rule 6)

	%eof           accept


State 68

	%start_pExpr2 -> Expr2 .                            (rule 5)
	Expr2 -> Expr2 . Expr3                              (rule 37)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'j'            shift, and enter state 40
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41
	%eof           accept

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 81
	Complex        goto state 52

State 69

	%start_pExpr3 -> Expr3 .                            (rule 4)

	%eof           accept


State 70

	%start_pListPattern -> ListPattern .                (rule 3)

	%eof           accept


State 71

	ListPattern -> Pattern . ListPattern                (rule 26)

	'('            shift, and enter state 36
	':'            reduce using rule 25
	':='           reduce using rule 25
	L_Id           shift, and enter state 19
	%eof           reduce using rule 25

	Id             goto state 34
	ListPattern    goto state 80
	Pattern        goto state 71

State 72

	Toplevel -> Id . ListPattern ':=' Expr              (rule 23)
	Toplevel -> Id . ListPattern ':' Type ':=' Expr     (rule 24)

	'('            shift, and enter state 36
	':'            reduce using rule 25
	':='           reduce using rule 25
	L_Id           shift, and enter state 19

	Id             goto state 34
	ListPattern    goto state 79
	Pattern        goto state 71

State 73

	%start_pToplevel -> Toplevel .                      (rule 2)

	%eof           accept


State 74

	%start_pListToplevel -> ListToplevel .              (rule 1)

	%eof           accept


State 75

	ListToplevel -> Toplevel . ';' ListToplevel         (rule 22)

	';'            shift, and enter state 78


State 76

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 77

	Program -> ListToplevel .                           (rule 20)

	%eof           reduce using rule 20


State 78

	ListToplevel -> Toplevel ';' . ListToplevel         (rule 22)

	L_Id           shift, and enter state 19
	%eof           reduce using rule 21

	Id             goto state 72
	ListToplevel   goto state 128
	Toplevel       goto state 75

State 79

	Toplevel -> Id ListPattern . ':=' Expr              (rule 23)
	Toplevel -> Id ListPattern . ':' Type ':=' Expr     (rule 24)

	':'            shift, and enter state 126
	':='           shift, and enter state 127


State 80

	ListPattern -> Pattern ListPattern .                (rule 26)

	':'            reduce using rule 26
	':='           reduce using rule 26
	%eof           reduce using rule 26


State 81

	Expr2 -> Expr2 Expr3 .                              (rule 37)

	'('            reduce using rule 37
	')'            reduce using rule 37
	'+'            reduce using rule 37
	','            reduce using rule 37
	'-'            reduce using rule 37
	'-j'           reduce using rule 37
	';'            reduce using rule 37
	'else'         reduce using rule 37
	'j'            reduce using rule 37
	'then'         reduce using rule 37
	'}'            reduce using rule 37
	'~+'           reduce using rule 37
	'~-'           reduce using rule 37
	'~0'           reduce using rule 37
	'~1'           reduce using rule 37
	'~i'           reduce using rule 37
	'~j'           reduce using rule 37
	L_Id           reduce using rule 37
	L_Scalar       reduce using rule 37
	%eof           reduce using rule 37


State 82

	Expr1 -> 'λ' ListId . '.' Expr                      (rule 45)

	'.'            shift, and enter state 125


State 83

	Expr1 -> 'let' '{' . ListLet '}' 'in' Expr          (rule 44)

	'('            shift, and enter state 36
	L_Id           shift, and enter state 19

	Id             goto state 34
	Let            goto state 42
	ListLet        goto state 124
	Pattern        goto state 44

State 84

	Expr1 -> 'if°' Expr . 'then' Expr 'else' Expr       (rule 41)

	'then'         shift, and enter state 123


State 85

	Expr1 -> 'if*' Expr . 'then' Expr 'else' Expr       (rule 42)

	'then'         shift, and enter state 122


State 86

	Expr1 -> 'if' Expr . 'then' Expr 'else' Expr        (rule 43)

	'then'         shift, and enter state 121


State 87

	Expr1 -> '\\' ListId . '.' Expr                     (rule 46)

	'.'            shift, and enter state 120


State 88

	Expr3 -> '(' Expr . ')'                             (rule 36)
	ListExpr -> Expr .                                  (rule 50)
	ListExpr -> Expr . ',' ListExpr                     (rule 51)

	')'            shift, and enter state 119
			(reduce using rule 50)

	','            shift, and enter state 91


State 89

	Expr3 -> '(' ListExpr . ')'                         (rule 34)

	')'            shift, and enter state 118


State 90

	Expr3 -> Complex '*' . Expr3                        (rule 35)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'j'            shift, and enter state 40
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 117
	Complex        goto state 52

State 91

	ListExpr -> Expr ',' . ListExpr                     (rule 51)

	'('            shift, and enter state 53
	')'            reduce using rule 49
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41
	%eof           reduce using rule 49

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 50
	ListExpr       goto state 116
	Complex        goto state 52

State 92

	Expr1 -> Expr2 '+' . Expr1                          (rule 39)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 115
	Complex        goto state 52

State 93

	Expr1 -> Expr2 '-' . Expr1                          (rule 40)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 114
	Complex        goto state 52

State 94

	Let -> Pattern '=' . Expr                           (rule 52)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 113
	Complex        goto state 52

State 95

	ListLet -> Let ';' . ListLet                        (rule 54)

	'('            shift, and enter state 36
	L_Id           shift, and enter state 19

	Id             goto state 34
	Let            goto state 42
	ListLet        goto state 112
	Pattern        goto state 44

State 96

	Complex -> Scalar '+' . Scalar 'j'                  (rule 55)

	L_Scalar       shift, and enter state 41

	Scalar         goto state 111

State 97

	Complex -> Scalar 'j' .                             (rule 57)

	'*'            reduce using rule 57
	%eof           reduce using rule 57


State 98

	Pattern -> '(' Id . ',' Id ')'                      (rule 61)

	','            shift, and enter state 110


State 99

	Type -> '∀' ListId . '.' Mono                       (rule 70)

	'.'            shift, and enter state 109


State 100

	Type -> 'forall' ListId . '.' Mono                  (rule 71)

	'.'            shift, and enter state 108


State 101

	Mono2 -> '(' Mono . ')'                             (rule 64)

	')'            shift, and enter state 107


State 102

	Mono1 -> Mono2 '*' . Mono1                          (rule 65)

	'('            shift, and enter state 27
	'qubit'        shift, and enter state 29
	L_Id           shift, and enter state 19

	Id             goto state 22
	Mono2          goto state 23
	Mono1          goto state 106

State 103

	Mono1 -> Mono2 '->' . Mono1                         (rule 66)

	'('            shift, and enter state 27
	'qubit'        shift, and enter state 29
	L_Id           shift, and enter state 19

	Id             goto state 22
	Mono2          goto state 23
	Mono1          goto state 105

State 104

	ListId -> Id ListId .                               (rule 73)

	'.'            reduce using rule 73
	%eof           reduce using rule 73


State 105

	Mono1 -> Mono2 '->' Mono1 .                         (rule 66)

	')'            reduce using rule 66
	':='           reduce using rule 66
	%eof           reduce using rule 66


State 106

	Mono1 -> Mono2 '*' Mono1 .                          (rule 65)

	')'            reduce using rule 65
	':='           reduce using rule 65
	%eof           reduce using rule 65


State 107

	Mono2 -> '(' Mono ')' .                             (rule 64)

	')'            reduce using rule 64
	'*'            reduce using rule 64
	'->'           reduce using rule 64
	':='           reduce using rule 64
	%eof           reduce using rule 64


State 108

	Type -> 'forall' ListId '.' . Mono                  (rule 71)

	'('            shift, and enter state 27
	'qubit'        shift, and enter state 29
	L_Id           shift, and enter state 19

	Id             goto state 22
	Mono2          goto state 23
	Mono1          goto state 24
	Mono           goto state 140

State 109

	Type -> '∀' ListId '.' . Mono                       (rule 70)

	'('            shift, and enter state 27
	'qubit'        shift, and enter state 29
	L_Id           shift, and enter state 19

	Id             goto state 22
	Mono2          goto state 23
	Mono1          goto state 24
	Mono           goto state 139

State 110

	Pattern -> '(' Id ',' . Id ')'                      (rule 61)

	L_Id           shift, and enter state 19

	Id             goto state 138

State 111

	Complex -> Scalar '+' Scalar . 'j'                  (rule 55)

	'j'            shift, and enter state 137


State 112

	ListLet -> Let ';' ListLet .                        (rule 54)

	'}'            reduce using rule 54
	%eof           reduce using rule 54


State 113

	Let -> Pattern '=' Expr .                           (rule 52)

	';'            reduce using rule 52
	'}'            reduce using rule 52
	%eof           reduce using rule 52


State 114

	Expr1 -> Expr2 '-' Expr1 .                          (rule 40)

	')'            reduce using rule 40
	','            reduce using rule 40
	';'            reduce using rule 40
	'else'         reduce using rule 40
	'then'         reduce using rule 40
	'}'            reduce using rule 40
	%eof           reduce using rule 40


State 115

	Expr1 -> Expr2 '+' Expr1 .                          (rule 39)

	')'            reduce using rule 39
	','            reduce using rule 39
	';'            reduce using rule 39
	'else'         reduce using rule 39
	'then'         reduce using rule 39
	'}'            reduce using rule 39
	%eof           reduce using rule 39


State 116

	ListExpr -> Expr ',' ListExpr .                     (rule 51)

	')'            reduce using rule 51
	%eof           reduce using rule 51


State 117

	Expr3 -> Complex '*' Expr3 .                        (rule 35)

	'('            reduce using rule 35
	')'            reduce using rule 35
	'+'            reduce using rule 35
	','            reduce using rule 35
	'-'            reduce using rule 35
	'-j'           reduce using rule 35
	';'            reduce using rule 35
	'else'         reduce using rule 35
	'j'            reduce using rule 35
	'then'         reduce using rule 35
	'}'            reduce using rule 35
	'~+'           reduce using rule 35
	'~-'           reduce using rule 35
	'~0'           reduce using rule 35
	'~1'           reduce using rule 35
	'~i'           reduce using rule 35
	'~j'           reduce using rule 35
	L_Id           reduce using rule 35
	L_Scalar       reduce using rule 35
	%eof           reduce using rule 35


State 118

	Expr3 -> '(' ListExpr ')' .                         (rule 34)

	'('            reduce using rule 34
	')'            reduce using rule 34
	'+'            reduce using rule 34
	','            reduce using rule 34
	'-'            reduce using rule 34
	'-j'           reduce using rule 34
	';'            reduce using rule 34
	'else'         reduce using rule 34
	'j'            reduce using rule 34
	'then'         reduce using rule 34
	'}'            reduce using rule 34
	'~+'           reduce using rule 34
	'~-'           reduce using rule 34
	'~0'           reduce using rule 34
	'~1'           reduce using rule 34
	'~i'           reduce using rule 34
	'~j'           reduce using rule 34
	L_Id           reduce using rule 34
	L_Scalar       reduce using rule 34
	%eof           reduce using rule 34


State 119

	Expr3 -> '(' Expr ')' .                             (rule 36)

	'('            reduce using rule 36
	')'            reduce using rule 36
	'+'            reduce using rule 36
	','            reduce using rule 36
	'-'            reduce using rule 36
	'-j'           reduce using rule 36
	';'            reduce using rule 36
	'else'         reduce using rule 36
	'j'            reduce using rule 36
	'then'         reduce using rule 36
	'}'            reduce using rule 36
	'~+'           reduce using rule 36
	'~-'           reduce using rule 36
	'~0'           reduce using rule 36
	'~1'           reduce using rule 36
	'~i'           reduce using rule 36
	'~j'           reduce using rule 36
	L_Id           reduce using rule 36
	L_Scalar       reduce using rule 36
	%eof           reduce using rule 36


State 120

	Expr1 -> '\\' ListId '.' . Expr                     (rule 46)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 136
	Complex        goto state 52

State 121

	Expr1 -> 'if' Expr 'then' . Expr 'else' Expr        (rule 43)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 135
	Complex        goto state 52

State 122

	Expr1 -> 'if*' Expr 'then' . Expr 'else' Expr       (rule 42)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 134
	Complex        goto state 52

State 123

	Expr1 -> 'if°' Expr 'then' . Expr 'else' Expr       (rule 41)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 133
	Complex        goto state 52

State 124

	Expr1 -> 'let' '{' ListLet . '}' 'in' Expr          (rule 44)

	'}'            shift, and enter state 132


State 125

	Expr1 -> 'λ' ListId '.' . Expr                      (rule 45)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 131
	Complex        goto state 52

State 126

	Toplevel -> Id ListPattern ':' . Type ':=' Expr     (rule 24)

	'('            shift, and enter state 27
	'forall'       shift, and enter state 28
	'qubit'        shift, and enter state 29
	'∀'            shift, and enter state 30
	L_Id           shift, and enter state 19

	Id             goto state 22
	Mono2          goto state 23
	Mono1          goto state 24
	Mono           goto state 25
	Type           goto state 130

State 127

	Toplevel -> Id ListPattern ':=' . Expr              (rule 23)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 129
	Complex        goto state 52

State 128

	ListToplevel -> Toplevel ';' ListToplevel .         (rule 22)

	%eof           reduce using rule 22


State 129

	Toplevel -> Id ListPattern ':=' Expr .              (rule 23)

	';'            reduce using rule 23
	%eof           reduce using rule 23


State 130

	Toplevel -> Id ListPattern ':' Type . ':=' Expr     (rule 24)

	':='           shift, and enter state 146


State 131

	Expr1 -> 'λ' ListId '.' Expr .                      (rule 45)

	')'            reduce using rule 45
	','            reduce using rule 45
	';'            reduce using rule 45
	'else'         reduce using rule 45
	'then'         reduce using rule 45
	'}'            reduce using rule 45
	%eof           reduce using rule 45


State 132

	Expr1 -> 'let' '{' ListLet '}' . 'in' Expr          (rule 44)

	'in'           shift, and enter state 145


State 133

	Expr1 -> 'if°' Expr 'then' Expr . 'else' Expr       (rule 41)

	'else'         shift, and enter state 144


State 134

	Expr1 -> 'if*' Expr 'then' Expr . 'else' Expr       (rule 42)

	'else'         shift, and enter state 143


State 135

	Expr1 -> 'if' Expr 'then' Expr . 'else' Expr        (rule 43)

	'else'         shift, and enter state 142


State 136

	Expr1 -> '\\' ListId '.' Expr .                     (rule 46)

	')'            reduce using rule 46
	','            reduce using rule 46
	';'            reduce using rule 46
	'else'         reduce using rule 46
	'then'         reduce using rule 46
	'}'            reduce using rule 46
	%eof           reduce using rule 46


State 137

	Complex -> Scalar '+' Scalar 'j' .                  (rule 55)

	'*'            reduce using rule 55
	%eof           reduce using rule 55


State 138

	Pattern -> '(' Id ',' Id . ')'                      (rule 61)

	')'            shift, and enter state 141


State 139

	Type -> '∀' ListId '.' Mono .                       (rule 70)

	':='           reduce using rule 70
	%eof           reduce using rule 70


State 140

	Type -> 'forall' ListId '.' Mono .                  (rule 71)

	':='           reduce using rule 71
	%eof           reduce using rule 71


State 141

	Pattern -> '(' Id ',' Id ')' .                      (rule 61)

	'('            reduce using rule 61
	':'            reduce using rule 61
	':='           reduce using rule 61
	'='            reduce using rule 61
	L_Id           reduce using rule 61
	%eof           reduce using rule 61


State 142

	Expr1 -> 'if' Expr 'then' Expr 'else' . Expr        (rule 43)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 151
	Complex        goto state 52

State 143

	Expr1 -> 'if*' Expr 'then' Expr 'else' . Expr       (rule 42)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 150
	Complex        goto state 52

State 144

	Expr1 -> 'if°' Expr 'then' Expr 'else' . Expr       (rule 41)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 149
	Complex        goto state 52

State 145

	Expr1 -> 'let' '{' ListLet '}' 'in' . Expr          (rule 44)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 148
	Complex        goto state 52

State 146

	Toplevel -> Id ListPattern ':' Type ':=' . Expr     (rule 24)

	'('            shift, and enter state 53
	'-j'           shift, and enter state 39
	'\\'           shift, and enter state 54
	'if'           shift, and enter state 55
	'if*'          shift, and enter state 56
	'if°'          shift, and enter state 57
	'j'            shift, and enter state 40
	'let'          shift, and enter state 58
	'~+'           shift, and enter state 59
	'~-'           shift, and enter state 60
	'~0'           shift, and enter state 61
	'~1'           shift, and enter state 62
	'~i'           shift, and enter state 63
	'~j'           shift, and enter state 64
	'λ'            shift, and enter state 65
	L_Id           shift, and enter state 19
	L_Scalar       shift, and enter state 41

	Id             goto state 46
	Scalar         goto state 37
	Expr3          goto state 47
	Expr2          goto state 48
	Expr1          goto state 49
	Expr           goto state 147
	Complex        goto state 52

State 147

	Toplevel -> Id ListPattern ':' Type ':=' Expr .     (rule 24)

	';'            reduce using rule 24
	%eof           reduce using rule 24


State 148

	Expr1 -> 'let' '{' ListLet '}' 'in' Expr .          (rule 44)

	')'            reduce using rule 44
	','            reduce using rule 44
	';'            reduce using rule 44
	'else'         reduce using rule 44
	'then'         reduce using rule 44
	'}'            reduce using rule 44
	%eof           reduce using rule 44


State 149

	Expr1 -> 'if°' Expr 'then' Expr 'else' Expr .       (rule 41)

	')'            reduce using rule 41
	','            reduce using rule 41
	';'            reduce using rule 41
	'else'         reduce using rule 41
	'then'         reduce using rule 41
	'}'            reduce using rule 41
	%eof           reduce using rule 41


State 150

	Expr1 -> 'if*' Expr 'then' Expr 'else' Expr .       (rule 42)

	')'            reduce using rule 42
	','            reduce using rule 42
	';'            reduce using rule 42
	'else'         reduce using rule 42
	'then'         reduce using rule 42
	'}'            reduce using rule 42
	%eof           reduce using rule 42


State 151

	Expr1 -> 'if' Expr 'then' Expr 'else' Expr .        (rule 43)

	')'            reduce using rule 43
	','            reduce using rule 43
	';'            reduce using rule 43
	'else'         reduce using rule 43
	'then'         reduce using rule 43
	'}'            reduce using rule 43
	%eof           reduce using rule 43


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 74
Number of terminals: 36
Number of non-terminals: 38
Number of states: 152
