-- File generated by the BNF Converter (bnfc 2.9.3).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for Frontend.

module Frontend.Signe.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Frontend.Signe.Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Frontend.Signe.Abs.Id where
  prt _ (Frontend.Signe.Abs.Id (_,i)) = doc $ showString i
instance Print Frontend.Signe.Abs.Scalar where
  prt _ (Frontend.Signe.Abs.Scalar i) = doc $ showString i
instance Print Frontend.Signe.Abs.Program where
  prt i = \case
    Frontend.Signe.Abs.Progr toplevels -> prPrec i 0 (concatD [prt 0 toplevels])

instance Print [Frontend.Signe.Abs.Toplevel] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print Frontend.Signe.Abs.Toplevel where
  prt i = \case
    Frontend.Signe.Abs.ToplF id_ patterns expr -> prPrec i 0 (concatD [prt 0 id_, prt 0 patterns, doc (showString ":="), prt 0 expr])
    Frontend.Signe.Abs.ToplFT id_ patterns type_ expr -> prPrec i 0 (concatD [prt 0 id_, prt 0 patterns, doc (showString ":"), prt 0 type_, doc (showString ":="), prt 0 expr])

instance Print [Frontend.Signe.Abs.Pattern] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print Frontend.Signe.Abs.Expr where
  prt i = \case
    Frontend.Signe.Abs.EVar id_ -> prPrec i 3 (concatD [prt 0 id_])
    Frontend.Signe.Abs.ETrue -> prPrec i 3 (concatD [doc (showString "~1")])
    Frontend.Signe.Abs.EFalse -> prPrec i 3 (concatD [doc (showString "~0")])
    Frontend.Signe.Abs.ETup exprs -> prPrec i 3 (concatD [doc (showString "("), prt 0 exprs, doc (showString "]")])
    Frontend.Signe.Abs.EApp expr1 expr2 -> prPrec i 2 (concatD [prt 2 expr1, prt 3 expr2])
    Frontend.Signe.Abs.ESup complex1 expr1 supop complex2 expr2 -> prPrec i 1 (concatD [prt 0 complex1, doc (showString "*"), prt 2 expr1, prt 0 supop, prt 0 complex2, doc (showString "*"), prt 1 expr2])
    Frontend.Signe.Abs.EMul complex expr -> prPrec i 1 (concatD [prt 0 complex, doc (showString "*"), prt 2 expr])
    Frontend.Signe.Abs.EComp expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "\8728"), prt 1 expr2])
    Frontend.Signe.Abs.EIfq expr1 expr2 expr3 -> prPrec i 1 (concatD [doc (showString "if\176"), prt 0 expr1, doc (showString "then"), prt 0 expr2, doc (showString "else"), prt 0 expr3])
    Frontend.Signe.Abs.EIf expr1 expr2 expr3 -> prPrec i 1 (concatD [doc (showString "if"), prt 0 expr1, doc (showString "then"), prt 0 expr2, doc (showString "else"), prt 0 expr3])
    Frontend.Signe.Abs.ELet lets expr -> prPrec i 1 (concatD [doc (showString "let"), doc (showString "{"), prt 0 lets, doc (showString "}"), doc (showString "in"), prt 0 expr])
    Frontend.Signe.Abs.EAbs ids expr -> prPrec i 1 (concatD [doc (showString "\955"), prt 0 ids, doc (showString "."), prt 0 expr])

instance Print [Frontend.Signe.Abs.Expr] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Frontend.Signe.Abs.Let where
  prt i = \case
    Frontend.Signe.Abs.LLet pattern_ expr -> prPrec i 0 (concatD [prt 0 pattern_, doc (showString "="), prt 0 expr])

instance Print [Frontend.Signe.Abs.Let] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print Frontend.Signe.Abs.SupOp where
  prt i = \case
    Frontend.Signe.Abs.SOPlus -> prPrec i 0 (concatD [doc (showString "+")])
    Frontend.Signe.Abs.SOMin -> prPrec i 0 (concatD [doc (showString "-")])

instance Print Frontend.Signe.Abs.Complex where
  prt i = \case
    Frontend.Signe.Abs.CComp scalar1 scalar2 -> prPrec i 2 (concatD [prt 0 scalar1, doc (showString "+"), prt 0 scalar2, doc (showString "i")])
    Frontend.Signe.Abs.CComn scalar1 scalar2 -> prPrec i 2 (concatD [prt 0 scalar1, doc (showString "-"), prt 0 scalar2, doc (showString "i")])
    Frontend.Signe.Abs.CPi -> prPrec i 2 (concatD [doc (showString "\960")])
    Frontend.Signe.Abs.CE -> prPrec i 2 (concatD [doc (showString "e")])
    Frontend.Signe.Abs.CExp complex1 complex2 -> prPrec i 1 (concatD [prt 2 complex1, doc (showString "^"), prt 1 complex2])
    Frontend.Signe.Abs.CDiv complex1 complex2 -> prPrec i 1 (concatD [prt 2 complex1, doc (showString "/"), prt 1 complex2])
    Frontend.Signe.Abs.CMul complex1 complex2 -> prPrec i 1 (concatD [prt 2 complex1, prt 1 complex2])

instance Print Frontend.Signe.Abs.Pattern where
  prt i = \case
    Frontend.Signe.Abs.Pattern patternvar -> prPrec i 0 (concatD [prt 0 patternvar])
    Frontend.Signe.Abs.Patterns patternvars -> prPrec i 0 (concatD [doc (showString "("), prt 0 patternvars, doc (showString ")")])

instance Print Frontend.Signe.Abs.PatternVar where
  prt i = \case
    Frontend.Signe.Abs.PVar id_ -> prPrec i 0 (concatD [prt 0 id_])

instance Print [Frontend.Signe.Abs.PatternVar] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print Frontend.Signe.Abs.Mono where
  prt i = \case
    Frontend.Signe.Abs.MVar id_ -> prPrec i 2 (concatD [prt 0 id_])
    Frontend.Signe.Abs.MQubit -> prPrec i 2 (concatD [doc (showString "qubit")])
    Frontend.Signe.Abs.MUnit -> prPrec i 2 (concatD [doc (showString "\8868")])
    Frontend.Signe.Abs.MTens mono1 mono2 -> prPrec i 1 (concatD [prt 2 mono1, doc (showString "*"), prt 1 mono2])
    Frontend.Signe.Abs.MArrow mono1 mono2 -> prPrec i 1 (concatD [prt 2 mono1, doc (showString "->"), prt 1 mono2])

instance Print Frontend.Signe.Abs.Type where
  prt i = \case
    Frontend.Signe.Abs.TMono mono -> prPrec i 0 (concatD [prt 0 mono])
    Frontend.Signe.Abs.TPoly ids mono -> prPrec i 0 (concatD [doc (showString "\8704"), prt 0 ids, doc (showString "."), prt 0 mono])

instance Print [Frontend.Signe.Abs.Id] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]
