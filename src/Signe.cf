layout toplevel ;

Progr. Program ::= [Toplevel] ;
terminator Toplevel ";" ;

ToplF  . Toplevel ::= Id [Pattern] ":=" Expr ;
ToplFT . Toplevel ::= Id [Pattern] ":" Type ":=" Expr ;
separator Pattern "" ;

position token Id '~' char | letter (letter | digit | '_' | '\'')* ;

EVar   . Expr3 ::= Id ;
ETrue  . Expr3 ::= "~1" ;
EFalse . Expr3 ::= "~0" ;
qplus  . Expr3 ::= "~+" ;
qminus . Expr3 ::= "~-" ;
qimagi . Expr3 ::= "~i" ;
qimagj . Expr3 ::= "~j" ;
ETup   . Expr3 ::= "(" [Expr] ")" ;
EApp   . Expr2 ::= Expr2 Expr3 ;
ESup   . Expr1 ::= Complex "*" Expr2 SupOp Complex "*" Expr1 ;
sunit  . Expr1 ::= Expr2 SupOp Expr1 ;
EMul   . Expr1 ::= Complex "*" Expr2 ;
edolr  . Expr1 ::= Expr2 "$" Expr1 ;
EComp  . Expr1 ::= Expr2 "∘" Expr1 ;
ecomps . Expr1 ::= Expr2 "@" Expr1 ;
EIfq   . Expr1 ::= "if°" Expr "then" Expr "else" Expr ;
eifqs  . Expr1 ::= "if*" Expr "then" Expr "else" Expr ;
EIf    . Expr1 ::= "if" Expr "then" Expr "else" Expr ;
ELet   . Expr1 ::= "let" "{" [Let] "}" "in" Expr ;
EAbs   . Expr1 ::= "λ" [Id] "." Expr ;
eabss  . Expr1 ::= "\\" [Id] "." Expr ;
coercions Expr 3 ;
separator Expr "," ;

define qplus        = sunit EFalse SOPlus ETrue ;
define qminus       = sunit EFalse SOMin ETrue ;
define qimagi       = EMul cjmag ETrue ;
define qimagj       = EMul cnmag EFalse ;
define edolr a b    = EApp a b ;
define ecomps a b   = EComp a b ;
define eifqs c t f  = EIfq c t f ;
define eabss x m    = EAbs x m ;
define sunit e1 op e2  = ESup (creal (Scalar "0.7071067811865475")) e1 op (creal (Scalar "0.7071067811865475")) e2 ;

layout "let" ;
layout stop "in" ;

LLet . Let ::= Pattern "=" Expr ;
separator nonempty Let ";" ;

SOPlus . SupOp ::= "+" ;
SOMin  . SupOp ::= "-" ;

CComp . Complex2 ::= Scalar "+" Scalar "i" ;
CComn . Complex2 ::= Scalar "-" Scalar "i" ;
creal . Complex2 ::= Scalar ;
cimag . Complex2 ::= Scalar "i" ;
cnmag . Complex2 ::= "-i" ;
cjmag . Complex2 ::= "i" ;
CPi   . Complex2 ::= "π" ;
cpis  . Complex2 ::= "pi" ;
CE    . Complex2 ::= "e" ;
CExp  . Complex1 ::= Complex2 "^" Complex1 ;
CDiv  . Complex1 ::= Complex2 "/" Complex1 ;
CMul  . Complex1 ::= Complex2 Complex1 ;
coercions Complex 2 ;

define creal r = CComp r (Scalar "0") ;
define cimag i = CComp (Scalar "0") i ;
define cnmag   = CComp (Scalar "0") (Scalar "-1") ;
define cjmag   = CComp (Scalar "0") (Scalar "1") ;
define cpis    = CPi ;

token Scalar '-'? digit+ ('.' digit+ ('E' '-'? digit+)?)? ;

Pattern  . Pattern    ::= PatternVar ;
Patterns . Pattern    ::= "(" [PatternVar] ")" ;
PVar     . PatternVar ::= Id ;
separator PatternVar "," ;

MVar   . Mono2 ::= Id ;
MQubit . Mono2 ::= "qubit" ;
MUnit  . Mono2 ::= "⊤" ;
munits . Mono2 ::= "unit" ;
MTens  . Mono1 ::= Mono2 "*" Mono1 ;
MArrow . Mono1 ::= Mono2 "->" Mono1 ;
coercions Mono 2 ;

define munits = MUnit ;

TMono  . Type ::= Mono ;
TPoly  . Type ::= "∀" [Id] "." Mono ;
tpolys . Type ::= "forall" [Id] "." Mono ;
separator nonempty Id "" ; 

define tpolys c t = TPoly c t ;

comment "--" ;
comment "{-" "-}" ;
